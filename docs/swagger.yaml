definitions:
  controller.userResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/model.User'
        type: array
    type: object
  model.Task:
    properties:
      description:
        example: Описание задачи
        type: string
      title:
        example: Новая задача
        type: string
    type: object
  model.User:
    properties:
      address:
        example: г. Москва, ул. Ленина, д. 5, кв. 1
        type: string
      created_at:
        type: string
      id:
        type: string
      name:
        example: Иван
        type: string
      passportNumber:
        type: integer
      passportSeries:
        type: integer
      patronymic:
        example: Иванович
        type: string
      surname:
        example: Иванов
        type: string
      updated_at:
        type: string
    type: object
  model.UserCreate:
    properties:
      address:
        example: г. Москва, ул. Ленина, д. 5, кв. 1
        type: string
      name:
        example: Иван
        type: string
      passportNumber:
        example: 1234 567890
        type: string
      patronymic:
        example: Иванович
        type: string
      surname:
        example: Иванов
        type: string
    type: object
  utils.HTTPError:
    properties:
      code:
        example: 400
        type: integer
      message:
        example: 'Status: Bad Request'
        type: string
    type: object
  utils.HTTPSuccess:
    properties:
      code:
        example: 200
        type: integer
      message:
        example: 'Status: OK'
        type: string
    type: object
info:
  contact: {}
paths:
  /tasks/countdown/end/{tid}:
    patch:
      consumes:
      - application/json
      description: Закончить отсчет времени по задаче для пользователя
      parameters:
      - description: ID задачи
        in: path
        name: tid
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.HTTPSuccess'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.HTTPError'
      summary: Закончить отсчет времени по задаче для пользователя
      tags:
      - tasks
  /tasks/countdown/start/{uid}:
    post:
      consumes:
      - application/json
      description: Начать отсчет времени по задаче для пользователя
      parameters:
      - description: ID пользователя
        in: path
        name: uid
        required: true
        type: string
      - description: Описание задачи
        in: body
        name: task
        schema:
          $ref: '#/definitions/model.Task'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.HTTPSuccess'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.HTTPError'
      summary: Начать отсчет времени по задаче для пользователя
      tags:
      - tasks
  /tasks/info:
    get:
      consumes:
      - application/json
      description: Получение трудозатрат по пользователю за период задача-сумма часов
        и минут с сортировкой от большей затраты к меньшей
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.Task'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.HTTPError'
      summary: Получение трудозатрат по пользователю
      tags:
      - tasks
  /users/create:
    post:
      consumes:
      - application/json
      description: Создает нового пользователя
      parameters:
      - description: Новый пользователь
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/model.UserCreate'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/controller.userResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.HTTPError'
      summary: Создает нового пользователя
      tags:
      - users
  /users/delete/{id}:
    delete:
      description: Изменение данных пользователя
      parameters:
      - description: Идентификатор пользователя
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.HTTPSuccess'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.HTTPError'
      summary: Удаление пользователя
      tags:
      - users
  /users/find/{id}:
    get:
      consumes:
      - application/json
      description: Получение данных о пользователе по ID
      parameters:
      - description: Идентификатор пользователя
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controller.userResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.HTTPError'
      summary: Получение данных о пользователе по ID
      tags:
      - users
  /users/info:
    get:
      consumes:
      - application/json
      description: Получение данных о пользователе по серии и номеру паспорта
      parameters:
      - description: Поиск по серии паспорта
        in: query
        name: passportSeries
        required: true
        type: integer
      - description: Поиск по номеру паспорта
        in: query
        name: passportNumber
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/controller.userResponse'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.HTTPError'
      summary: Получение данных о пользователе по паспорту
      tags:
      - users
  /users/list:
    get:
      consumes:
      - application/json
      description: Получение данных о всех пользователях
      parameters:
      - default: "1"
        description: Укажите с какой страницы смотреть
        in: query
        name: page
        type: string
      - default: "10"
        description: Укажите какое количество выводить
        in: query
        name: limit
        type: string
      - description: Сортировать данные
        example: asc, desc
        in: query
        name: sort
        type: string
      - description: Поле для сортировки
        example: Id, Surname, Name, Patronymic, Address, PassportSeries, PassportNumber
        in: query
        name: field
        type: string
      - description: Поиск по полям
        in: query
        name: search
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/controller.userResponse'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.HTTPError'
      summary: Получение данных о всех пользователях
      tags:
      - users
  /users/update/{id}:
    patch:
      consumes:
      - application/json
      description: Изменение данных пользователя
      parameters:
      - description: Идентификатор пользователя
        in: path
        name: id
        required: true
        type: string
      - description: Изменение данных пользователя
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/model.UserCreate'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controller.userResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.HTTPError'
      summary: Изменение данных пользователя
      tags:
      - users
swagger: "2.0"
